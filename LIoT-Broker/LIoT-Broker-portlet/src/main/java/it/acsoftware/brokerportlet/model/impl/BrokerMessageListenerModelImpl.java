package it.acsoftware.brokerportlet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.acsoftware.brokerportlet.model.BrokerMessageListener;
import it.acsoftware.brokerportlet.model.BrokerMessageListenerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BrokerMessageListener service. Represents a row in the &quot;LiOT_BrokerMessageListener&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.acsoftware.brokerportlet.model.BrokerMessageListenerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrokerMessageListenerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BrokerMessageListenerImpl
 * @see it.acsoftware.brokerportlet.model.BrokerMessageListener
 * @see it.acsoftware.brokerportlet.model.BrokerMessageListenerModel
 * @generated
 */
public class BrokerMessageListenerModelImpl extends BaseModelImpl<BrokerMessageListener>
    implements BrokerMessageListenerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a broker message listener model instance should use the {@link it.acsoftware.brokerportlet.model.BrokerMessageListener} interface instead.
     */
    public static final String TABLE_NAME = "LiOT_BrokerMessageListener";
    public static final Object[][] TABLE_COLUMNS = {
            { "brokerMessageListenerId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "brokerId", Types.BIGINT },
            { "topics", Types.VARCHAR },
            { "type_", Types.VARCHAR },
            { "messageBusDestination", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table LiOT_BrokerMessageListener (brokerMessageListenerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,brokerId LONG,topics VARCHAR(75) null,type_ VARCHAR(75) null,messageBusDestination VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table LiOT_BrokerMessageListener";
    public static final String ORDER_BY_JPQL = " ORDER BY brokerMessageListener.brokerMessageListenerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY LiOT_BrokerMessageListener.brokerMessageListenerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.it.acsoftware.brokerportlet.model.BrokerMessageListener"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.it.acsoftware.brokerportlet.model.BrokerMessageListener"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.it.acsoftware.brokerportlet.model.BrokerMessageListener"),
            true);
    public static long BROKERID_COLUMN_BITMASK = 1L;
    public static long COMPANYID_COLUMN_BITMASK = 2L;
    public static long NAME_COLUMN_BITMASK = 4L;
    public static long TYPE_COLUMN_BITMASK = 8L;
    public static long BROKERMESSAGELISTENERID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.it.acsoftware.brokerportlet.model.BrokerMessageListener"));
    private static ClassLoader _classLoader = BrokerMessageListener.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BrokerMessageListener.class
        };
    private long _brokerMessageListenerId;
    private long _groupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _originalName;
    private String _description;
    private long _brokerId;
    private long _originalBrokerId;
    private boolean _setOriginalBrokerId;
    private String _topics;
    private String _type;
    private String _originalType;
    private String _messageBusDestination;
    private long _columnBitmask;
    private BrokerMessageListener _escapedModel;

    public BrokerMessageListenerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _brokerMessageListenerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setBrokerMessageListenerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _brokerMessageListenerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BrokerMessageListener.class;
    }

    @Override
    public String getModelClassName() {
        return BrokerMessageListener.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("brokerMessageListenerId", getBrokerMessageListenerId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("brokerId", getBrokerId());
        attributes.put("topics", getTopics());
        attributes.put("type", getType());
        attributes.put("messageBusDestination", getMessageBusDestination());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long brokerMessageListenerId = (Long) attributes.get(
                "brokerMessageListenerId");

        if (brokerMessageListenerId != null) {
            setBrokerMessageListenerId(brokerMessageListenerId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long brokerId = (Long) attributes.get("brokerId");

        if (brokerId != null) {
            setBrokerId(brokerId);
        }

        String topics = (String) attributes.get("topics");

        if (topics != null) {
            setTopics(topics);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String messageBusDestination = (String) attributes.get(
                "messageBusDestination");

        if (messageBusDestination != null) {
            setMessageBusDestination(messageBusDestination);
        }
    }

    @Override
    public long getBrokerMessageListenerId() {
        return _brokerMessageListenerId;
    }

    @Override
    public void setBrokerMessageListenerId(long brokerMessageListenerId) {
        _brokerMessageListenerId = brokerMessageListenerId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public long getBrokerId() {
        return _brokerId;
    }

    @Override
    public void setBrokerId(long brokerId) {
        _columnBitmask |= BROKERID_COLUMN_BITMASK;

        if (!_setOriginalBrokerId) {
            _setOriginalBrokerId = true;

            _originalBrokerId = _brokerId;
        }

        _brokerId = brokerId;
    }

    public long getOriginalBrokerId() {
        return _originalBrokerId;
    }

    @Override
    public String getTopics() {
        if (_topics == null) {
            return StringPool.BLANK;
        } else {
            return _topics;
        }
    }

    @Override
    public void setTopics(String topics) {
        _topics = topics;
    }

    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _columnBitmask |= TYPE_COLUMN_BITMASK;

        if (_originalType == null) {
            _originalType = _type;
        }

        _type = type;
    }

    public String getOriginalType() {
        return GetterUtil.getString(_originalType);
    }

    @Override
    public String getMessageBusDestination() {
        if (_messageBusDestination == null) {
            return StringPool.BLANK;
        } else {
            return _messageBusDestination;
        }
    }

    @Override
    public void setMessageBusDestination(String messageBusDestination) {
        _messageBusDestination = messageBusDestination;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            BrokerMessageListener.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BrokerMessageListener toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BrokerMessageListener) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BrokerMessageListenerImpl brokerMessageListenerImpl = new BrokerMessageListenerImpl();

        brokerMessageListenerImpl.setBrokerMessageListenerId(getBrokerMessageListenerId());
        brokerMessageListenerImpl.setGroupId(getGroupId());
        brokerMessageListenerImpl.setCompanyId(getCompanyId());
        brokerMessageListenerImpl.setUserId(getUserId());
        brokerMessageListenerImpl.setUserName(getUserName());
        brokerMessageListenerImpl.setCreateDate(getCreateDate());
        brokerMessageListenerImpl.setModifiedDate(getModifiedDate());
        brokerMessageListenerImpl.setName(getName());
        brokerMessageListenerImpl.setDescription(getDescription());
        brokerMessageListenerImpl.setBrokerId(getBrokerId());
        brokerMessageListenerImpl.setTopics(getTopics());
        brokerMessageListenerImpl.setType(getType());
        brokerMessageListenerImpl.setMessageBusDestination(getMessageBusDestination());

        brokerMessageListenerImpl.resetOriginalValues();

        return brokerMessageListenerImpl;
    }

    @Override
    public int compareTo(BrokerMessageListener brokerMessageListener) {
        long primaryKey = brokerMessageListener.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BrokerMessageListener)) {
            return false;
        }

        BrokerMessageListener brokerMessageListener = (BrokerMessageListener) obj;

        long primaryKey = brokerMessageListener.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BrokerMessageListenerModelImpl brokerMessageListenerModelImpl = this;

        brokerMessageListenerModelImpl._originalCompanyId = brokerMessageListenerModelImpl._companyId;

        brokerMessageListenerModelImpl._setOriginalCompanyId = false;

        brokerMessageListenerModelImpl._originalName = brokerMessageListenerModelImpl._name;

        brokerMessageListenerModelImpl._originalBrokerId = brokerMessageListenerModelImpl._brokerId;

        brokerMessageListenerModelImpl._setOriginalBrokerId = false;

        brokerMessageListenerModelImpl._originalType = brokerMessageListenerModelImpl._type;

        brokerMessageListenerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BrokerMessageListener> toCacheModel() {
        BrokerMessageListenerCacheModel brokerMessageListenerCacheModel = new BrokerMessageListenerCacheModel();

        brokerMessageListenerCacheModel.brokerMessageListenerId = getBrokerMessageListenerId();

        brokerMessageListenerCacheModel.groupId = getGroupId();

        brokerMessageListenerCacheModel.companyId = getCompanyId();

        brokerMessageListenerCacheModel.userId = getUserId();

        brokerMessageListenerCacheModel.userName = getUserName();

        String userName = brokerMessageListenerCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            brokerMessageListenerCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            brokerMessageListenerCacheModel.createDate = createDate.getTime();
        } else {
            brokerMessageListenerCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            brokerMessageListenerCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            brokerMessageListenerCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        brokerMessageListenerCacheModel.name = getName();

        String name = brokerMessageListenerCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            brokerMessageListenerCacheModel.name = null;
        }

        brokerMessageListenerCacheModel.description = getDescription();

        String description = brokerMessageListenerCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            brokerMessageListenerCacheModel.description = null;
        }

        brokerMessageListenerCacheModel.brokerId = getBrokerId();

        brokerMessageListenerCacheModel.topics = getTopics();

        String topics = brokerMessageListenerCacheModel.topics;

        if ((topics != null) && (topics.length() == 0)) {
            brokerMessageListenerCacheModel.topics = null;
        }

        brokerMessageListenerCacheModel.type = getType();

        String type = brokerMessageListenerCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            brokerMessageListenerCacheModel.type = null;
        }

        brokerMessageListenerCacheModel.messageBusDestination = getMessageBusDestination();

        String messageBusDestination = brokerMessageListenerCacheModel.messageBusDestination;

        if ((messageBusDestination != null) &&
                (messageBusDestination.length() == 0)) {
            brokerMessageListenerCacheModel.messageBusDestination = null;
        }

        return brokerMessageListenerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{brokerMessageListenerId=");
        sb.append(getBrokerMessageListenerId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", brokerId=");
        sb.append(getBrokerId());
        sb.append(", topics=");
        sb.append(getTopics());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", messageBusDestination=");
        sb.append(getMessageBusDestination());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("it.acsoftware.brokerportlet.model.BrokerMessageListener");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>brokerMessageListenerId</column-name><column-value><![CDATA[");
        sb.append(getBrokerMessageListenerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brokerId</column-name><column-value><![CDATA[");
        sb.append(getBrokerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>topics</column-name><column-value><![CDATA[");
        sb.append(getTopics());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>messageBusDestination</column-name><column-value><![CDATA[");
        sb.append(getMessageBusDestination());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
